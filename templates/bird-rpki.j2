{#

Common RPKI functions to use with BIRD

reject_rpki_invalid() - implicit arguments
    depends on these two functions:
        - complies_with_roa() - implicit arguments
    to be applied on each and every EBGP session

origin_to_roa(int asn)
    to be used to accept prefixes from an adjacent ASN
    if no IRR route object exists, but a valid ROA + announcement exist.
#}

include "rpkiwhitelist-{{ afi }}.conf";

{% for roa in roa_list|sort(attribute='origin') -%}
{%- if loop.previtem is not defined or loop.previtem['origin'] != roa['origin'] -%}
define ROAS_AS{{ roa['origin'] }} = [
{%- endif %}
	{{ roa['prefix'] }}{% if roa['prefixlen'] != roa['maxlen'] %}{{ "{" }}{{ roa['prefixlen'] }},{{ roa['maxlen'] }}{{ "}" }}{% endif %}
{%- if loop.nextitem is not defined or loop.nextitem['origin'] != roa['origin'] %}
];

{% else -%}
,
{%- endif -%}
{% endfor %}

roa table ROAS {
{% for roa in roa_list|sort(attribute='origin') -%}
{{ "    " }}roa {{ roa['prefix'] }} max {{ roa['maxlen'] }} as {{ roa['origin'] }};
{% endfor -%}
}

function origin_to_roa(int asn)
{
    case asn {
{%- for origin in origin_dict|sort() if not origin == 0 %}
        {{ origin }}: return net ~ ROAS_AS{{ origin }};
{%- endfor %}
        else: return false;
    }
}
